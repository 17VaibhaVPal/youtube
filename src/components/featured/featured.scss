.featured{
    height: 95vh;
    width: 230vh;
    position: relative;
    //{type && (: This is a conditional rendering statement.  Here, it checks if the type variable has a truthy value (i.e., not null, undefined, 0, false, or an empty string). If type is truthy, it proceeds with rendering the following JSX.
    .category{
        position: absolute;
        top: 90px;
        left: 60px;
        font-size: 30px;
        font-weight: 450;
        color: aliceblue;
        display: flex;
        align-items: center;
        // <select> element use to create a dropdown list
        select{
            cursor: pointer;
            background-color: var(--main-color);
            padding: 5px;
            border: 1px solid white;
            color: aliceblue;
            margin-left: 50px;
        }
    }

    }

img{
    
    width: 100%;
    height: 100%;
    object-fit:cover;

}
.info{
    display: flex;
    flex-direction: column;
    width: 35%;
    position: absolute;
    left: 50px;
    right: 100px;
    bottom: 100px;
    color:white;
    img{
        width: 400px;
        mix-blend-mode: color-burn;// IMPORTANT property
        
    }
    .description{
        margin:10px 0px;
        justify-content:space-evenly;
        font-size: 15px;
            }
}
.buttons{
    display: flex;

    buttons{
        padding: 10px 30px;
        border: 200px;
        border-radius: 50px;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 20px;
        font-weight: bold;
        margin-right: 10px;
        cursor:pointer;
        
        &.play{
            background-color: white;
            color: black;
        }
        
    }
    span{
        margin-left: 2px;
    }
}
.more{
    background-color:gray;
    color: white;
     padding: 5px 20px;
        border: 200px;
        border-radius: 10px;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 20px;
        font-weight: bold;
        cursor:pointer;
}